<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>wxPropertyGrid: wxCustomProperty Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.9 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>wxCustomProperty Class Reference</h1><!-- doxytag: class="wxCustomProperty" --><!-- doxytag: inherits="wxPGProperty" -->This is a somewhat inefficient but versatile property class.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;props.h&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for wxCustomProperty:</div>
<div class="dynsection">

<p><center><img src="classwxCustomProperty.png" usemap="#wxCustomProperty_map" border="0" alt=""></center>
<map name="wxCustomProperty_map">
<area href="classwxPGProperty.htm" alt="wxPGProperty" shape="rect" coords="0,0,117,24">
</map>
</div>

<p>
<a href="classwxCustomProperty-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwxCustomProperty.htm#db6fb5bfa9463eb64f60d07e82755267">ChildChanged</a> (wxVariant &amp;a1, int a2, wxVariant &amp;a3) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called after value of a child property has been altered.  <a href="#db6fb5bfa9463eb64f60d07e82755267"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwxCustomProperty.htm#680f7ef91d3ea6fcbaaced5ad056e92a">DoSetAttribute</a> (const wxString &amp;name, wxVariant &amp;value)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Special handling for attributes of this property.  <a href="#680f7ef91d3ea6fcbaaced5ad056e92a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwxCustomProperty.htm#64a86a19a3d57a76684d7b8c7fdd2236">GetChoiceInfo</a> (wxPGChoiceInfo *choiceinfo)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns current value's index to the choice control.  <a href="#64a86a19a3d57a76684d7b8c7fdd2236"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual wxString&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwxCustomProperty.htm#cfe4b715d33c4108540f61e43528256d">GetValueAsString</a> (int argFlags) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns text representation of property's value.  <a href="#cfe4b715d33c4108540f61e43528256d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwxCustomProperty.htm#0d314fe9f58e64c3e84114affb56d707">IntToValue</a> (wxVariant &amp;variant, int number, int argFlags) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Converts 'number' (including choice selection) into proper value 'variant'.  <a href="#0d314fe9f58e64c3e84114affb56d707"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwxCustomProperty.htm#e1d1b697a65087fabe0607bd03f666fe">OnCustomPaint</a> (wxDC &amp;dc, const wxRect &amp;rect, <a class="el" href="structwxPGPaintData.htm">wxPGPaintData</a> &amp;paintdata)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Override to paint an image in front of the property value text or drop-down list item (but only if <a class="el" href="classwxPGProperty.htm#8c4008c4d7d148bd06f9db590301df76" title="Returns size of the custom painted image in front of property.">wxPGProperty::OnMeasureImage</a> is overridden as well).  <a href="#e1d1b697a65087fabe0607bd03f666fe"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual wxSize&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwxCustomProperty.htm#f645d5c89fbdab6ac39ebb1ef701e992">OnMeasureImage</a> (int item) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns size of the custom painted image in front of property.  <a href="#f645d5c89fbdab6ac39ebb1ef701e992"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwxCustomProperty.htm#1e7ad5e3a61dfb4a8671b68b32f7292c">StringToValue</a> (wxVariant &amp;variant, const wxString &amp;text, int argFlags=0) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Converts 'text' into proper value 'variant'.  <a href="#1e7ad5e3a61dfb4a8671b68b32f7292c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ba1587f510bd6e20e52828c293235801"></a><!-- doxytag: member="wxCustomProperty::wxCustomProperty" ref="ba1587f510bd6e20e52828c293235801" args="(const wxString &amp;label=wxPG_LABEL, const wxString &amp;name=wxPG_LABEL)" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><b>wxCustomProperty</b> (const wxString &amp;label=wxPG_LABEL, const wxString &amp;name=wxPG_LABEL)</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="f6823ca35dc2d365013b7c2eedd1aa75"></a><!-- doxytag: member="wxCustomProperty::m_choices" ref="f6823ca35dc2d365013b7c2eedd1aa75" args="" -->
<a class="el" href="classwxPGChoices.htm">wxPGChoices</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>m_choices</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="6869d245b7cfdde04d7d582c43e086cf"></a><!-- doxytag: member="wxCustomProperty::m_paintCallback" ref="6869d245b7cfdde04d7d582c43e086cf" args="" -->
<a class="el" href="group__miscellaneous.htm#g21937a843330941d01d8ed7d9f8902de">wxPGPaintCallback</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>m_paintCallback</b></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
This is a somewhat inefficient but versatile property class. 
<p>
Base class offers the following:<ul>
<li>By default has string value type.</li><li>Has capacity to have choices.</li><li>Can have custom-paint bitmap. </li></ul>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="db6fb5bfa9463eb64f60d07e82755267"></a><!-- doxytag: member="wxCustomProperty::ChildChanged" ref="db6fb5bfa9463eb64f60d07e82755267" args="(wxVariant &amp;a1, int a2, wxVariant &amp;a3) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void wxCustomProperty::ChildChanged           </td>
          <td>(</td>
          <td class="paramtype">wxVariant &amp;&nbsp;</td>
          <td class="paramname"> <em>thisValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>childIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">wxVariant &amp;&nbsp;</td>
          <td class="paramname"> <em>childValue</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Called after value of a child property has been altered. 
<p>
Note that this function is usually called at the time that value of this property, or given child property, is still pending for change.<p>
Sample pseudo-code implementation:<p>
<div class="fragment"><pre class="fragment">        <span class="keywordtype">void</span> <a class="code" href="classwxCustomProperty.htm#db6fb5bfa9463eb64f60d07e82755267" title="Called after value of a child property has been altered.">MyProperty::ChildChanged</a>( wxVariant&amp; thisValue, <span class="keywordtype">int</span> childIndex, wxVariant&amp; childValue )<span class="keyword"> const</span>
<span class="keyword">        </span>{
            <span class="comment">// Acquire reference to actual type of data stored in variant</span>
            <span class="comment">// (TFromVariant only exists if wxPropertyGrid's wxVariant-macros were used to create</span>
            <span class="comment">// the variant class).</span>
            T&amp; data = TFromVariant(thisValue);

            <span class="comment">// Copy childValue into data.</span>
            <span class="keywordflow">switch</span> ( childIndex )
            {
                <span class="keywordflow">case</span> 0:
                    data.SetSubProp1( childvalue.GetLong() );
                    <span class="keywordflow">break</span>;
                <span class="keywordflow">case</span> 1:
                    data.SetSubProp2( childvalue.GetString() );
                    <span class="keywordflow">break</span>;
                ...
            }
        }
</pre></div><p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>thisValue</em>&nbsp;</td><td>Value of this property, that should be altered. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>childIndex</em>&nbsp;</td><td>Index of child changed (you can use Item(childIndex) to get). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>childValue</em>&nbsp;</td><td>Value of the child property. </td></tr>
  </table>
</dl>

<p>Reimplemented from <a class="el" href="classwxPGProperty.htm#ce7a9dc69fdf8185cff04c1604cb4fbd">wxPGProperty</a>.</p>

</div>
</div><p>
<a class="anchor" name="680f7ef91d3ea6fcbaaced5ad056e92a"></a><!-- doxytag: member="wxCustomProperty::DoSetAttribute" ref="680f7ef91d3ea6fcbaaced5ad056e92a" args="(const wxString &amp;name, wxVariant &amp;value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool wxCustomProperty::DoSetAttribute           </td>
          <td>(</td>
          <td class="paramtype">const wxString &amp;&nbsp;</td>
          <td class="paramname"> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">wxVariant &amp;&nbsp;</td>
          <td class="paramname"> <em>value</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Special handling for attributes of this property. 
<p>
If returns false, then the attribute will be automatically stored in m_attributes.<p>
Default implementation simply returns false. 
<p>Reimplemented from <a class="el" href="classwxPGProperty.htm#7d355ae4bd55f00bc149e5416c39908c">wxPGProperty</a>.</p>

</div>
</div><p>
<a class="anchor" name="64a86a19a3d57a76684d7b8c7fdd2236"></a><!-- doxytag: member="wxCustomProperty::GetChoiceInfo" ref="64a86a19a3d57a76684d7b8c7fdd2236" args="(wxPGChoiceInfo *choiceinfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual int wxCustomProperty::GetChoiceInfo           </td>
          <td>(</td>
          <td class="paramtype">wxPGChoiceInfo *&nbsp;</td>
          <td class="paramname"> <em>choiceinfo</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns current value's index to the choice control. 
<p>
May also return, through pointer arguments, strings that should be inserted to that control. Irrelevant to classes which do not employ wxPG_EDITOR(Choice) or similar. <dl class="remark" compact><dt><b>Remarks:</b></dt><dd><ul>
<li>If returns NULL in choices, then this class must be derived from <a class="el" href="classwxBaseEnumProperty.htm" title="Derive dynamic custom properties with choices from this class.">wxBaseEnumProperty</a>.</li><li>Must not crash even if property's set of choices is uninitialized (i.e. it points to wxPGGlobalVars-&gt;m_emptyConstants). </li></ul>
</dd></dl>

<p>Reimplemented from <a class="el" href="classwxPGProperty.htm#805b98f7d147782079bb9a48915a949f">wxPGProperty</a>.</p>

</div>
</div><p>
<a class="anchor" name="cfe4b715d33c4108540f61e43528256d"></a><!-- doxytag: member="wxCustomProperty::GetValueAsString" ref="cfe4b715d33c4108540f61e43528256d" args="(int argFlags) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual wxString wxCustomProperty::GetValueAsString           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>argFlags</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns text representation of property's value. 
<p>
Generally this function should not be called from the application code. Instead, call <a class="el" href="classwxPGProperty.htm#9133d43d6e539e2814ed28d2f37d953e" title="Same as GetValueAsString, except takes common value into account.">GetValueString()</a>.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>argFlags</em>&nbsp;</td><td>If wxPG_FULL_VALUE is set, returns complete, storable string value instead of displayable. If wxPG_EDITABLE_VALUE is set, returns string value that must be editable in textctrl. If wxPG_COMPOSITE_FRAGMENT is set, returns text that is appropriate to display as a part of composite property string value.</td></tr>
  </table>
</dl>
<dl class="remark" compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Default implementation returns string composed from text representations of child properties.</li><li>Implementations are never called with m_value being null variant (ie. unspecified value), so you don't need to check for that. Naturally this means that unspecified value is always displayed as an empty string.</li></ul>
</dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classwxPGProperty.htm#9133d43d6e539e2814ed28d2f37d953e" title="Same as GetValueAsString, except takes common value into account.">GetValueString()</a> </dd></dl>

<p>Reimplemented from <a class="el" href="classwxPGProperty.htm#29f70a60e4844efbebc140270e1a4358">wxPGProperty</a>.</p>

</div>
</div><p>
<a class="anchor" name="0d314fe9f58e64c3e84114affb56d707"></a><!-- doxytag: member="wxCustomProperty::IntToValue" ref="0d314fe9f58e64c3e84114affb56d707" args="(wxVariant &amp;variant, int number, int argFlags) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool wxCustomProperty::IntToValue           </td>
          <td>(</td>
          <td class="paramtype">wxVariant &amp;&nbsp;</td>
          <td class="paramname"> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>argFlags</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Converts 'number' (including choice selection) into proper value 'variant'. 
<p>
Returns true if new (different than m_value) value could be interpreted from the integer. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>argFlags</em>&nbsp;</td><td>If wxPG_FULL_VALUE is set, returns complete, storable value instead of displayable</td></tr>
  </table>
</dl>
<dl class="remark" compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Default implementation may work correctly if used value type is int.</li><li>If property is not supposed to use choice or spinctrl or other editor with int-based value, it is not necessary to implement this method.</li><li>If property uses choice control, and displays a dialog on some choice items, then it is preferred to display that dialog in IntToValue instead of OnEvent.</li><li>You might want to take into account that m_value is Null variant if property value is unspecified (which is usually only case if you explicitly enabled that sort behavior). </li></ul>
</dd></dl>

<p>Reimplemented from <a class="el" href="classwxPGProperty.htm#d0a8e61a356e1366170967d56af66231">wxPGProperty</a>.</p>

</div>
</div><p>
<a class="anchor" name="e1d1b697a65087fabe0607bd03f666fe"></a><!-- doxytag: member="wxCustomProperty::OnCustomPaint" ref="e1d1b697a65087fabe0607bd03f666fe" args="(wxDC &amp;dc, const wxRect &amp;rect, wxPGPaintData &amp;paintdata)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void wxCustomProperty::OnCustomPaint           </td>
          <td>(</td>
          <td class="paramtype">wxDC &amp;&nbsp;</td>
          <td class="paramname"> <em>dc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const wxRect &amp;&nbsp;</td>
          <td class="paramname"> <em>rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structwxPGPaintData.htm">wxPGPaintData</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>paintdata</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Override to paint an image in front of the property value text or drop-down list item (but only if <a class="el" href="classwxPGProperty.htm#8c4008c4d7d148bd06f9db590301df76" title="Returns size of the custom painted image in front of property.">wxPGProperty::OnMeasureImage</a> is overridden as well). 
<p>
If property's <a class="el" href="classwxCustomProperty.htm#f645d5c89fbdab6ac39ebb1ef701e992" title="Returns size of the custom painted image in front of property.">OnMeasureImage()</a> returns size that has height != 0 but less than row height ( &lt; 0 has special meanings), <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> calls this method to draw a custom image in a limited area in front of the editor control or value text/graphics, and if control has drop-down list, then the image is drawn there as well (even in the case <a class="el" href="classwxCustomProperty.htm#f645d5c89fbdab6ac39ebb1ef701e992" title="Returns size of the custom painted image in front of property.">OnMeasureImage()</a> returned higher height than row height).<p>
NOTE: Following applies when <a class="el" href="classwxCustomProperty.htm#f645d5c89fbdab6ac39ebb1ef701e992" title="Returns size of the custom painted image in front of property.">OnMeasureImage()</a> returns a "flexible" height ( using wxPG_FLEXIBLE_SIZE(W,H) macro), which implies variable height items: If rect.x is &lt; 0, then this is a measure item call, which means that dc is invalid and only thing that should be done is to set paintdata.m_drawnHeight to the height of the image of item at index paintdata.m_choiceItem. This call may be done even as often as once every drop-down popup show.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dc</em>&nbsp;</td><td>wxDC to paint on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rect</em>&nbsp;</td><td>Box reserved for custom graphics. Includes surrounding rectangle, if any. If x is &lt; 0, then this is a measure item call (see above). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>paintdata</em>&nbsp;</td><td><a class="el" href="structwxPGPaintData.htm" title="Contains information relayed to property&#39;s OnCustomPaint.">wxPGPaintData</a> structure with much useful data.</td></tr>
  </table>
</dl>
<dl class="remark" compact><dt><b>Remarks:</b></dt><dd><ul>
<li>You can actually exceed rect width, but if you do so then paintdata.m_drawnWidth must be set to the full width drawn in pixels.</li><li>Due to technical reasons, rect's height will be default even if custom height was reported during measure call.</li><li>Brush is guaranteed to be default background colour. It has been already used to clear the background of area being painted. It can be modified.</li><li>Pen is guaranteed to be 1-wide 'black' (or whatever is the proper colour) pen for drawing framing rectangle. It can be changed as well. </li></ul>
</dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classwxCustomProperty.htm#cfe4b715d33c4108540f61e43528256d">GetValueAsString</a> </dd></dl>

<p>Reimplemented from <a class="el" href="classwxPGProperty.htm#d0b00df4a3916cb80adfa1227c70baf4">wxPGProperty</a>.</p>

</div>
</div><p>
<a class="anchor" name="f645d5c89fbdab6ac39ebb1ef701e992"></a><!-- doxytag: member="wxCustomProperty::OnMeasureImage" ref="f645d5c89fbdab6ac39ebb1ef701e992" args="(int item) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual wxSize wxCustomProperty::OnMeasureImage           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>item</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns size of the custom painted image in front of property. 
<p>
This method must be overridden to return non-default value if OnCustomPaint is to be called. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>item</em>&nbsp;</td><td>Normally -1, but can be an index to the property's list of items. </td></tr>
  </table>
</dl>
<dl class="remark" compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Default behavior is to return wxSize(0,0), which means no image.</li><li>Default image width or height is indicated with dimension -1.</li><li>You can also return wxPG_DEFAULT_IMAGE_SIZE which equals wxSize(-1, -1). </li></ul>
</dd></dl>

<p>Reimplemented from <a class="el" href="classwxPGProperty.htm#8c4008c4d7d148bd06f9db590301df76">wxPGProperty</a>.</p>

</div>
</div><p>
<a class="anchor" name="1e7ad5e3a61dfb4a8671b68b32f7292c"></a><!-- doxytag: member="wxCustomProperty::StringToValue" ref="1e7ad5e3a61dfb4a8671b68b32f7292c" args="(wxVariant &amp;variant, const wxString &amp;text, int argFlags=0) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool wxCustomProperty::StringToValue           </td>
          <td>(</td>
          <td class="paramtype">wxVariant &amp;&nbsp;</td>
          <td class="paramname"> <em>variant</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const wxString &amp;&nbsp;</td>
          <td class="paramname"> <em>text</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>argFlags</em> = <code>0</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Converts 'text' into proper value 'variant'. 
<p>
Returns true if new (different than m_value) value could be interpreted from the text. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>argFlags</em>&nbsp;</td><td>If wxPG_FULL_VALUE is set, returns complete, storable value instead of displayable one (they may be different). If wxPG_COMPOSITE_FRAGMENT is set, text is interpreted as a part of composite property string value (as generated by <a class="el" href="classwxCustomProperty.htm#cfe4b715d33c4108540f61e43528256d" title="Returns text representation of property&#39;s value.">GetValueAsString()</a> called with this same flag).</td></tr>
  </table>
</dl>
<dl class="remark" compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Default implementation converts semicolon delimited tokens into child values. Only works for properties with children.</li><li>You might want to take into account that m_value is Null variant if property value is unspecified (which is usually only case if you explicitly enabled that sort behavior). </li></ul>
</dd></dl>

<p>Reimplemented from <a class="el" href="classwxPGProperty.htm#974a9b01c1f88cf4db630b6895453db8">wxPGProperty</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li>props.h</ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Sun Jul 12 13:11:22 2009 for wxPropertyGrid by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.9 </small></address>
</body>
</html>
